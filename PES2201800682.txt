I) INTRODUCTION:

An intal is a non-negative integer of arbitrary length, the number of digits in an intal can go up to any number. No datatype can be able to handle such huge numbers, hence we represent intals as strings. Every intal is a sequence of digits '0' to '9' terminated by a null terminator ('\0'). The numbers are stored in the strings in Big-Endian style i.e., the most significant bit is in the smallest address of the array (i.e., string). So an intal is an integer represented by a null terminated string string in big endian format.

Integers are numbers that range from -infinity to +infinity, no number has a fractional part associated with it. Similarly even intals have no fractional parts associated with them, but intals differ from integers in negative numbers, all intals are non-negative integers, intals include 0 and all whole numbers. Also, intals differ from integers in their representation, even a single digit intal is a null - terminated string. Intal processing always involves string to integer conversion and vice versa, integer processing doesn't involve integer and string inter-conversions.

In C integer data type can hold numbers from -2,147,483,647 to 2,147,483,647, whereas an intal can hold any number of digits, there's no limit to the magnitude of the number it can handle, but processing size of intals is implementation specific, my implementation is limited to 1000 digits. But an intal cannot take negative numbers like integer datatype. C also has different varieties of integer datatypes like short int, unsigned int, unsigned short int, etc., but all the varieties are limited in their range to hold numbers. Unlike integer datatypes intals have no limit in their range to hold numbers. A common Integer type variable occupies 2 or 4 bytes and can hold values from -2,147,483,647 to 2,147,483,647, a char type variable occupies one byte and can represent only a single digit. This shows that intals occupies more space to represent the same number when compared with integers, for instance, representation of 2,147,483,647 using an integer datatype variable needs 4 bytes of memory whereas an intal would take 11 bytes to represent the same number, one byte for each digit and another byte for a null terminator. 


Before we get into the applications of intals let me add an interesting fact, the study of nomenclature and properties of large numbers is sometimes called GOOGOLOGY. The name of the GOOGLE company has its roots towards this, the word "googol" means a number 1 followed by 100 zeros. 
We can find the applications of intals in the following subjects:


1) Physical cosmology 

It is a branch of cosmology concerned with the studies of the largest-scale structures and dynamics of the universe and with fundamental questions about its origin, structure, evolution, and ultimate fate.
The study of this subject involves really large numbers and use of intals will be of great help.



2) Cryptography

It is the practice and study of techniques for secure communication in the presence of third parties called adversaries. More generally, cryptography is about constructing and analyzing protocols that prevent third parties or the public from reading private messages; various aspects in information security such as data confidentiality, data integrity, authentication, and non-repudiation are central to modern cryptography.
This subject involves large numbers and intals and a library that supports intal processing will be of great help.



3) Statistical mechanics 

It is one of the pillars of modern physics. It is necessary for the fundamental study of any physical system that has many degrees of freedom. The approach is based on statistical methods, probability theory and the microscopic physical laws.

and so on. We can use intals to describe real world objects as well,
examples of large numbers describing everyday real-world objects include:

1) The number of bits on a computer hard disk (typically about 1013, 500–1000 GB)
2) The estimated number of atoms in the observable universe (10^80)
3) The mass of Earth consists of about 4x(10^51) nucleons
4) The number of cells in the human body (estimated at 3.72 × 10^13)
5) The number of neuronal connections in the human brain (estimated at 10^14)
6) The lower bound on the game-tree complexity of chess, also known as the "Shannon number" (estimated at around 10^120)
7) The Avogadro constant is the number of "elementary entities" (usually atoms or molecules) in one mole; the number of atoms in 12 grams of carbon-12 – approximately 6.022×10^23.


There's no limit to the applications of large numbers in this world and development of libraries for intal processing will be very useful in solving many global problems.







II) APPROACH:

1) INTAL ADDITION:

As the intals are represented in the big endian format, the number in the units position will be present at the penultimate position in the array,hence I have traversed the string array of intals from the end.

The method is that I want to perform addition the way we were thaught in our school days. Starting from the units position add the digits in the units position of both the intals, take a carry if needed and move to the next higher valued position in the number. From the second iteration we'll have to add the digits of both the intals as well as the carry from the previous iteration.

To code this procedure:
1) I found the maximum and the minimum of the lengths of both the intals, created a result array that could accomodate the intal with the maximum length and also a carry that could be generated by the last iteration.

2) I made a for loop that would iterate as many number of times as of the minimum of the lengths of both the intals, because the intals can be of different length I took seperate counter variables for both the intals so that the addition is performed on the right valued position from both the intals, for example, the value in the units position of intal1 should be added with the value in the units position of intal2 even when both the intals are of different lengths.

3) The for loop would iterate only till one of the intals was fully consumed, then I ran 2 other while loops to iterate through the rest of either of the intals. The while loops use the same carry variable to account for the carry generated in the last iteration of the for loop. After both the intals are fully iterated the carry of the last iteration is added at the MSB.

4) The result array maintained till now was an integer type array, I have taken a new char type array and I have added '0' to every bit in the previous array to convert integer to a character of the same number, finally I append this character to the corresponding position in the character array.

5) The possible leading 0s generated is removed using a while loop, at the same time I am also taking care of the case where the sum itself is a 0. Then I am returning this final character array.







2) INTAL COMPARISON:

This function returns the comparison value of two intals. Returns 0 when both are equal, returns +1 when intal1 is greater, and -1 when intal2 is greater.

I straight away return 1 if the length of intal1 is greater than the length of intal2, -1 if the intal1's lenght is lesser than that of intal2. This is because even the smallest possible number ('1') in the next higher valued position of an intal implies that that intal is greater than its contemporary intal.

The only left out case is the case where both the intals have the same length. Starting from the MSBs we iterate through both the intals simultaneously till the corresponding values of both the intals are the same. If at all we find a NULL terminator then both the intals are equal and we return 0, if find different values before we encounter the null terminator then the two intals are definitely different and we compare the differing values, if intal1's value is greater than the corresponding value of intal2 then intal1 is greater and we return 1 else intal2 is greater and we return -1.







3) INTAL DIFFERENCE:

Here I have again implemented a school level approach to find the difference of 2 intals. We'll see the detailed code level design in the following steps:

1) I found the maximum of the 2 lengths of both the intals and allocated memory of size of (maximum length+1) for the result array, +1 to accomodate the null terminator.

2) I have another static function that finds intal1 - intal2 based on what is passed to it. 
If length of the first intal is greater than that of the second then we have to do intal1 - intal2, hence I have called my static function with intal1 and intal2 unchanged. If the length of intal2 is greater then I have called my static function by interchanging intal 2 and intal1. 
When both intal1 and intal2 are of same length, I have compared both and called my static function appropriately, while calling I have put intal2 in place of intal1 and intal1 in place of intal2 if intal2 is greater than intal1.


3) After I recieved the difference from my static function I have chopped of any leading 0s and returned the result.

4) Coming to the working of my static function which calculates intal1 - intal2. 
I have a for loop that iterates till the intal of smaller length is fully consumed, I have seperate counters for both the intals to ensure that the bits in the corresponding positions are subtracted.

5) If the digit in intal1 is greater than or equal to the corresponding digit in intal2, I place digit1 - digit2 in the result array.

6) If the digit in intal1 is less than the corresponding digit in intal2 then we have to borrow. I have a pointer carry_finder that iterates backwards till it finds a non-zero digit. It should find one such digit because we have made sure that intal1 is greater than intal2 in this function. 

7) I have subtracted one from the non-zero digit, placed a '9' at all the bits which had 0s, I have then added 10 to the position in consideration i.e., the one where the digit in intal1 is less than the corresponding digit in intal2. Then I have performed subtraction as intal1's digit will be greater than intal2's digit, and stored the result digit in the result array.

8) The borrow bit has settled matters with all the other digits and we don't have anything more to take care of, I perform the same process to all the other bits. Finally I convert the integer array to string array by placing equivalent characters for the digits in the integer array and return it to the calling function which would then remove the leading 0s and return the array to the main function.










4) INTAL MULTIPLY:

The following steps detail my design process:

1) I have created a 2d array dynamically to store the intermediate results. 

2) A for loop iterates till one of the intals is fully consumed, I use different counters for both the intals and starting from the units position I multiply the corresponding digits and store it in a temporary result array. If there is any carry generated I store it in a carry variable to take it to the next iteration. After all the digits in the smaller intal is fully consumed I store the temporary result array in the 2d array defined initially. 

3) At last all the rows in the 2d array are summed and it's result is returned to the main function











5) INTAL MOD:

I have detailed my approach in the form of the following steps:

1) I use the following formula to find the remainder:

	remainder = intal1 - (quotient * intal2) 

I have defined a seperate function to divide, intal1/intal2, and find the quotient, once I find the quotient I make use of the above formula to return the result.


2) Now we'll see how the divide function works:
If intal1 is less than intal2 or if intal1 is 0 then 0 is returned as the quotient.

3) I make use of a temporary array which will always store the derivative of the intal1 than is to be used to find the next digit in the quotient.

4) Initially, temp will take as many digits from intal1 as is the length of intal2. 'j' will always keep track of the number of digits used in intal1.

5) We will run a while loop until all the digits in the intal1 are consumed, inside the loop we compare the temp array we spoke about with a multiple of intal2. If a multiple of intal2 is less than the current temp string then we'll add the next digit in intal1 to temp string and append a 0 to the quotient. In case there's no digit left in intal1, we append 0 to the quotient and return it.

6) In the same iteration of the while loop, we run another while loop until the temp string is greater than the current multiple intal2. I do this to find the appropriate multiple of the intal2 for the quotient. In every iteration of this while loop we keep using the next multiple of intal2 and we will reach point where a certain multiple of intal2 is greater than the current intal1. We take the multiplier of this multiple and append it to the quotient. If no multiplier was used at all then we append 0 to the quotient.

7) We subtract the multiple from the previous temp string, take another digit from intal1 and append it to the temp string. We will check if this temp is suitable, if its not then we'll add a 0 to the quotient and take another digit. If there are no more digits left in intal1 then we return the quotient.

8) The divide function returns the quotient after removing any leading 0s. In the calling function we apply the formula discussed earlier

remainder = intal1 - (quotient * intal2) 

and return the remainder i.e., intal1 mod intal2





















6) INTAL POW

Consider the following steps:

1) If intal1 is "0" I return "0", if n is 0 I return "1".

2) I have made another recursive function having O(log n) time complexity, I pass the intal and n to the recursive function.

3) The base condition of the recursive function is n=0, whenever n=0 the function returns "1", a temporary variable calls the recursive function with intal and n/2. If n is an even number the recursive function returns temp*temp, if n is an odd number then it returns intal*temp*temp. 
The time complexity of this recursive function reduces from O(n) to O(log n) because we use a temporary variable and avoid extra calls to itself.

All the operations are taken care of to be intal operations (strings).















7) INTAL GCD


We make a null terminated string which holds "0" and pass this string along with the two intals to another recursive function.

This recursive function uses Euclid's algorithm, its base condition is if intal1 is equal to "0" then it returns intal2. This function places (intal2 mod intal1) in place of intal1 and intal1 in place of intal2 and calls itself. After a series of recursive calls to itself it returns the GCD of the 2 intals as null terminated string.










8) INTAL FIBONACCI

This function takes in only one unsigned int variable(here 'n') as the parameter, if n = 0 I directly return 0 and if n = 1 I directly return 1.

I run a for loop ranging from 2 to n, in every iteration the loop assigns the sum of the previous 2 intals in the series to a result vaiable. The loop also assigns its current value to a variable and the previous value in the series to another variable, these 2 variables will be useful to find the next value in the series.

The function finally returns the value in the result variable after the termination of the looping construct, this value is the value in the fibonacci series in the position passed to the function.














9) INTAL FACTORIAL 


I initialised a result string to "1" .If the input n is 0 or 1 I directly return result. I made a for loop ranging from 2 to n, in every iteration I convert the iteration variable to a string and then multiply the result with the iteration variable in string format.
I free the previous memory after assigning a new memory to the result variable to avoid memory leaks. I return the value in the result string after the for loop ends.














10) INTAL BINCOEFF

If k>n I return "0", if k == 0 I return "1". Here I make use of a 2d array where each element is a pointer to an intal. 

I have used a dynamic programming approach as mentioned in the problem statement, to avoid the calculation of the same combination of n and k I have made a 2d matrix (or a table) which has n rows and k columns. Only in the initial rows where i<k the table has 'i' columns. 
To fill this 2d matrix I run a for loop, using i, ranging from 0 to n and another for loop, usnig j, inside it which ranges from 0 to min(i,k). If the inner for loop's variable 'j' equals 0 or i then I assign "1" to the [i][j] in the table, according to the rules of C(n, k), if j takes any other value then I use the Pascal's identity C(n,k) = C(n-1,k) + C(n-1,k-1) to fill the [i][j] position of the table.

Finally I return [n][k] position's value from the table and before I return I free the space occupied by the 2d array.




------------------------------------------------------------------------------------------------------------------------------------------------




11) INTAL MAX

I assume the first intal in the array as the maximum element and I assign 0 to a variable max_offset which stores the offset of the maximum element, I then run a loop from the second element in the array till the end and I compare each element with the stored maximum element, if the element under consideration is greater than the previously stored max element then I reassign this value to the variable that holds the maximum element and its index to the variable max_offset that holds the offset of the largest intal.
At the end of the for loop, max_offset will have the offset of the largest element in the array and I return the variable max_offset.




------------------------------------------------------------------------------------------------------------------------------------------------



12) INTAL MIN


The offset of the first element is assumed to be the offset of the smallest intal in the array. For extra awareness I also store the smallest element in a variable. I traverse the array starting from the second element, everytime I find a smaller element I store its offset. By the end of the array traversal I will have the offset of the smallest variable in the array and I return it.



------------------------------------------------------------------------------------------------------------------------------------------------



13) INTAL SEARCH

I make a copy of the key, as it is a constant parameter, to pass the key to other functions. Starting from the first element in the array I traverse through the array and as soon as I find the key intal in the array I exit the function by returning the offset of the matched variable, this way I don't have to keep track of the first occurence of the key intal, I will anyway return the smallest occurence, and I can also save the time of comparing all the elements in the array.

If at all I finish traversing the array then the key is not present in the array and I return -1.


 
------------------------------------------------------------------------------------------------------------------------------------------------



14) INTAL BIN_SEARCH


I have implemented the general binary search algorithm in terms of intals here, this algorithm is both a divide and conquer algorithm as well as a decrease by a constant factor algorithm. Let me detail the algorithm, I have taken three pointers which will point to the first element, last element and the middle element of the array under consideration at that particular instance. Initially, the low pointer will point to the first element and the high pointer will point to the last element of the original array that is passed to the function.

I will run a while loop until the condition low <= high is satisfied, in every iteration to find the index of the middle element I find the average of the low and high variables and by doing so I will get the index of the element in the middle of the array. 

I will compare the middle element with the key, the element that is to be searched for, and
 
"if the key is found I will not break the loop, I will only update the index with a min variable and continue to traverse the array according to the binary search algorithm. This way the min variable will have the offset of the first occurrence of the key intal in the SORTED array even when there are multiple occurences of the key element"

After traversing through all possible parts of the sorted array that may contain the key element I return the min variable which will have the offset of the first occurence.





------------------------------------------------------------------------------------------------------------------------------------------------




15) INTAL SORT

I make use of the merge sort algorithm which has the expected time complexity O(n log n) in all the worst, average and best cases.
I have made use of 2 additional functions, the first function calls a recursive function and the recursive function will make use of an other function. Let me detail the process,

The first function only calls a recursive function with the first element's index as the left index and the last element's index as the last index. While the left index is less than the right index the recursive function, finds the average of the left and right indices to find the offset of the middle element of the part of the array under consideration. This recursive function then calls itself twice, once to sort its left part and again to sort its right part. After it gets the two parts it calls another function to merge the left and the right sorted parts.

The merge array has the following prototype:

static void merge(char **arr, int l, int m, int r) 

The merge array makes two arrays of pointers, one array stores the addresses of the intals in the left part and an other array stores the addresses of the indices of the left part.
Each of these left and right parts are traversed simultaneously to select the smaller of the two current elements of the left and right part. As we have a copy of the original array in the arrays which store the addresses of the left and right parts, the original array itself is modified, only the array which points to intals is manipulated. The selected element's address is put to the latest position of the original array, it would have started from the first position.
Once either the left or the right part is fully consumed the left out array is exactly copied to the remaining positions of the original array.
This way only the pointers are manipulated without touching the intals.
The merge function returns to the recursive function and the recursive function returns to the original function, the order of the addresses in the original array is permanently modified and hence nothing is returned.





------------------------------------------------------------------------------------------------------------------------------------------------



16) Coin-Row Problem - Dynamic Programming Solution

The problem requires use of the element in the (n-1) position, hence I make a new array and copy the elements of the original array one position ahead.
I have made use of an extra array which stores the maximum value at any instance. The formula which decides the maximum value at any instant is:

F(n) = max{Coins[n] + F[n − 2], F[n − 1]} for n > 1,
F(0) = 0, F(1) = Coins[1].


The F array would have had the maximum possible value in the (n-1) and (n-2) position, as per the constraint that no two elements should be consecutive we decide on whether we should pick the previous element or not. Here Coins is the array with every element being one position ahead. We have given initial conditions for F to avoid negative indices, -2 and -1.

For this algorithm,

TIME COMPLEXITY: O(n)
SPACE COMPLEXITY: O(n)

We have to traverse through all the elements, hence time complexity = O(n)
We need extra containing the same number of elements as the original array, hence space complexity = O(n)


I traverse through the entire copied array, the one in which every element is one position ahead, and I fill the intals in the F array as per the formula. The value in the last position in the F array is the needed maximum element.

I copy the value of the intal in the last position of the F array to the result variable and free all the extra spaces I have taken, F array, Coins array, ...
I finally return the intal in the last position in the F array (stored in result variable).







------------------------------------------------------------------------------------------------------------------------------------------------








III) FUTURE WORK


I would like to add functionalities of negative integers to the intal library, in every function the intal library has I would like to see it work for negative inputs as well, for that we'll have to make a seperate logic for negative numbers. I would also be interested to make these functions powerful enough to handle inputs with leading zeros. All the functions depend on a null terminator at the end of an intal, though it seems tough, I would like to make these functions handle intals even without a null terminator. The user might simetimes miss out on adding a null terminator at the end of the string and this feature would highly benefit the applications of intals. Just to increase the adaptibility of the code I would like to design the entire library for intals represented by little endian style as well, if there are companies which use little endian numbers in their databases then our library could be easily adapted by them. I would also like to make the functions robust enough to handle cases where there are no inputs to it, the functions must be able to raise appropriate exceptions.


I feel the intal library we have developed is very primitive and I would love to add way too many more functionalities to the intal library. For the many of the functions I have listed below the intal library should be able to process negative numbers as well, to list them:

1) ABS
Returns the absolute value of a number or duration, i.e. gives only the magnitude of the number input.

2) EVEN
Rounds a number away from zero to the next even number.

3) LCM
Returns the least common multiple of the specified numbers.

4) ODD
Rounds a number away from zero to the next odd number.

5) POLYNOMIAL
Evaluates a polynomial at a given point.

6) QUOTIENT
Returns the integer quotient of two numbers, though we have used this logic in the mod function I would like to have it explicitly.

7) RAND
Returns a random intal.

8) RANDBETWEEN
Returns a random integer within the specified range.

9) SUMSQ
Returns the sum of the squares of a collection of numbers.

10) SERIESSUM
Computes and returns the sum of a series.

11) SIGN
Returns 1 when a given number is positive, –1 when it is negative, and 0 when it is zero.

12) SUMIF
Returns the sum of a collection of numbers, including only numbers that satisfy a specified condition.

13) SUMPRODUCT
Returns the sum of the products of corresponding numbers in one or more ranges.




If you had no restrictions, how would you implement a library to handle integers of arbitrary length?

The two reasonable restrictions that we have are implementation of intals support upto 1000 digits and all intals are non-negative.

To support more than 1000 digits I would declare all the arrays depending on the size of the input variable, for instance, multiplication of two intals will give a result that occupies 1 or 2 digits more than the sum of the lengths of both the intals. And I would also check if the system can support memory for such huge intals, these are the two approaches I would take to support more digits.

To handle non-negative intals, I would have to make minor changes to my logic and these changes would be dependent on the kind of operation the function performs. For a few examples, in case of multiplication and division I can neglect the sign of the intals and perform the operation and I can assign a negative value to the result only if the signs of both the intals are different. In case of addition the operation itself changes based on the signs, if both the intals have different signs then addition becomes subtraction and the result gets the sign of the bigger number. Similarly in case of subtraction, if both the intals have different signs subtraction becomes addition and the result gets the sign of the larger number. In case of factorial we only have to add a negative sign to the result. 
This shows that we only have to make minor changes in the logic and we can process negative intals as well











 
